- name: Ensure default VPC present (when using default)
  amazon.aws.ec2_vpc_net_info:
    filters:
      isDefault: true
    region: "{{ aws_region }}"
  register: vpc_info
  when: use_default_vpc | default(true)

- name: Set VPC ID from default
  set_fact:
    vpc_id: "{{ vpc_info.vpcs[0].vpc_id }}"
  when: use_default_vpc | default(true)

- name: Create IAM role for EC2 with SSM access
  community.aws.iam_role:
    name: "{{ iam_role_name | default('EC2-SSM-Role') }}"
    assume_role_policy_document: |
      {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Principal": {
              "Service": "ec2.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
          }
        ]
      }
    description: "Role for EC2 instances to use SSM"
    managed_policies:
      - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
    state: present
  register: iam_role

- name: Create IAM instance profile
  community.aws.iam_instance_profile:
    name: "{{ iam_role_name | default('EC2-SSM-Role') }}"
    role: "{{ iam_role_name | default('EC2-SSM-Role') }}"
    state: present
  register: instance_profile

- name: Create/Ensure Security Group for Web
  amazon.aws.ec2_group:
    name: "{{ security_group_name }}"
    description: "{{ security_group_description }}"
    vpc_id: "{{ vpc_id }}"
    region: "{{ aws_region }}"
    state: present
    tags: "{{ tags_common | default({}) }}"
  register: web_sg

- name: Authorize HTTP ingress on Web SG (no SSH needed)
  amazon.aws.ec2_security_group:
    name: "{{ security_group_name }}"
    description: "{{ security_group_description }}"
    vpc_id: "{{ vpc_id }}"
    region: "{{ aws_region }}"
    rules:
      - proto: tcp
        from_port: 80
        to_port: 80
        cidr_ip: 0.0.0.0/0
        rule_desc: "Allow HTTP from anywhere"
      - proto: tcp
        from_port: 443
        to_port: 443
        cidr_ip: 0.0.0.0/0
        rule_desc: "Allow HTTPS from anywhere"
    rules_egress:
      - proto: -1
        from_port: 0
        to_port: 0
        cidr_ip: 0.0.0.0/0
        rule_desc: "Allow all egress"

- name: Lookup RDS SG by name
  amazon.aws.ec2_group_info:
    filters:
      vpc-id: "{{ vpc_id }}"
      group-name: "{{ rds_vpc_security_group_name }}"
    region: "{{ aws_region }}"
  register: rds_sg_info

- name: Fail if RDS SG not found
  fail:
    msg: "RDS SG '{{ rds_vpc_security_group_name }}' not found in VPC {{ vpc_id }}"
  when: rds_sg_info.security_groups | length == 0

- name: Set RDS SG ID fact
  set_fact:
    rds_sg_id: "{{ rds_sg_info.security_groups[0].group_id }}"

- name: Ensure RDS SG allows MySQL from Web SG (ingress)
  amazon.aws.ec2_security_group:
    name: "{{ rds_vpc_security_group_name }}"
    description: "Security group for RDS MySQL"
    vpc_id: "{{ vpc_id }}"
    region: "{{ aws_region }}"
    rules:
      - proto: tcp
        from_port: 3306
        to_port: 3306
        group_id: "{{ web_sg.group_id }}"
        rule_desc: "Allow MySQL from Web SG"
    rules_egress:
      - proto: -1
        from_port: 0
        to_port: 0
        cidr_ip: 0.0.0.0/0
        rule_desc: "Allow all egress"

- name: Launch/Ensure EC2 instance for web with IAM role
  amazon.aws.ec2_instance:
    name: "{{ ec2_tag_name | default(ec2_name) }}"
    region: "{{ aws_region }}"
    instance_type: "{{ ec2_instance_type }}"
    image_id: "{{ ec2_ami }}"
    wait: true
    iam_instance_profile: "{{ iam_role_name | default('EC2-SSM-Role') }}"
    network:
      assign_public_ip: true
      security_group: "{{ web_sg.group_id }}"
    user_data: |
      #!/bin/bash
      apt-get update
      apt-get install -y amazon-ssm-agent
      systemctl enable amazon-ssm-agent
      systemctl start amazon-ssm-agent
    tags: "{{ tags_common | default({}) }}"
    state: running
  register: ec2_result

- name: Set web host facts
  set_fact:
    web_instance_id: "{{ ec2_result.instances[0].instance_id }}"
    web_public_ip: "{{ ec2_result.instances[0].public_ip_address }}"
    web_public_dns: "{{ ec2_result.instances[0].public_dns_name }}"

- name: Wait for instance to be ready for SSM
  amazon.aws.ec2_instance_info:
    instance_ids:
      - "{{ web_instance_id }}"
    region: "{{ aws_region }}"
  register: instance_check
  until: instance_check.instances[0].state.name == 'running'
  retries: 30
  delay: 10

- name: Wait for SSM agent to be online
  pause:
    seconds: 90

- name: Install Nginx and MySQL client via SSM
  community.aws.execute_aws_ssm_document:
    document_name: "AWS-RunShellScript"
    instance_ids:
      - "{{ web_instance_id }}"
    parameters:
      commands:
        - "apt-get update"
        - "apt-get install -y nginx {{ mysql_client_pkg }}"
    region: "{{ aws_region }}"
  register: install_packages

- name: Create Nginx config via SSM
  community.aws.execute_aws_ssm_document:
    document_name: "AWS-RunShellScript"
    instance_ids:
      - "{{ web_instance_id }}"
    parameters:
      commands:
        - |
          cat > /etc/nginx/sites-available/default << 'EOF'
          {{ lookup('template', 'nginx_site.conf.j2') }}
          EOF
    region: "{{ aws_region }}"

- name: Create web root and set permissions via SSM
  community.aws.execute_aws_ssm_document:
    document_name: "AWS-RunShellScript"
    instance_ids:
      - "{{ web_instance_id }}"
    parameters:
      commands:
        - "mkdir -p /var/www/html"
        - "chown {{ app_user }}:{{ app_group }} /var/www/html"
        - "chmod 0755 /var/www/html"
    region: "{{ aws_region }}"

- name: Build DATABASE_URL string from RDS facts
  set_fact:
    database_url: "mysql://{{ rds_username }}:{{ rds_password }}@{{ rds_endpoint }}:{{ rds_port }}/{{ rds_db_name }}?charset=utf8mb4"

- name: Create index.html via SSM
  community.aws.execute_aws_ssm_document:
    document_name: "AWS-RunShellScript"
    instance_ids:
      - "{{ web_instance_id }}"
    parameters:
      commands:
        - |
          cat > /var/www/html/index.html << 'EOF'
          {{ lookup('template', 'index.html.j2') }}
          EOF
        - "chown {{ app_user }}:{{ app_group }} /var/www/html/index.html"
        - "chmod 0644 /var/www/html/index.html"
    region: "{{ aws_region }}"

- name: Create env file with DATABASE_URL via SSM
  community.aws.execute_aws_ssm_document:
    document_name: "AWS-RunShellScript"
    instance_ids:
      - "{{ web_instance_id }}"
    parameters:
      commands:
        - |
          cat > {{ env_file_path }} << 'EOF'
          DATABASE_URL="{{ database_url }}"
          EOF
        - "chmod 0600 {{ env_file_path }}"
    region: "{{ aws_region }}"

- name: Install envfile systemd unit via SSM
  community.aws.execute_aws_ssm_document:
    document_name: "AWS-RunShellScript"
    instance_ids:
      - "{{ web_instance_id }}"
    parameters:
      commands:
        - |
          cat > /etc/systemd/system/{{ env_service_name }}.service << 'EOF'
          {{ lookup('file', 'envfile.service') }}
          EOF
        - "chmod 0644 /etc/systemd/system/{{ env_service_name }}.service"
    region: "{{ aws_region }}"

- name: Reload systemd and enable services via SSM
  community.aws.execute_aws_ssm_document:
    document_name: "AWS-RunShellScript"
    instance_ids:
      - "{{ web_instance_id }}"
    parameters:
      commands:
        - "systemctl daemon-reload"
        - "systemctl enable {{ env_service_name }}"
        - "systemctl start {{ env_service_name }}"
        - "systemctl restart nginx"
    region: "{{ aws_region }}"
# Busca a VPC padrão na região (caso esteja usando a default VPC)
- name: Ensure default VPC present (when using default)
  amazon.aws.ec2_vpc_net_info:
    filters:
      isDefault: true
    region: "{{ aws_region }}"
  register: vpc_info
  when: use_default_vpc | default(true)

# Define vpc_id com a VPC padrão encontrada
- name: Set VPC ID from default
  set_fact:
    vpc_id: "{{ vpc_info.vpcs[0].vpc_id }}"
  when: use_default_vpc | default(true)

# Lista as subnets da VPC para construir o subnet group do RDS
- name: Get subnets for this VPC
  amazon.aws.ec2_vpc_subnet_info:
    filters:
      vpc-id: "{{ vpc_id }}"
    region: "{{ aws_region }}"
  register: vpc_subnets

# Cria a lista de subnet_ids a ser usada no RDS Subnet Group
- name: Build subnet list for RDS subnet group
  set_fact:
    rds_subnets: "{{ vpc_subnets.subnets | map(attribute='subnet_id') | list }}"

# Cria/garante o Subnet Group do RDS com as subnets da VPC
- name: Create/Ensure RDS Subnet Group
  amazon.aws.rds_subnet_group:
    state: present
    name: "{{ rds_subnet_group_name }}"
    description: "Subnet group for RDS"
    region: "{{ aws_region }}"
    subnets: "{{ rds_subnets }}"
    tags: "{{ tags_common | default({}) }}"
  register: rds_sng

# Cria/garante o Security Group do RDS (sem abrir portas aqui)
- name: Create/Ensure Security Group for RDS
  amazon.aws.ec2_group:
    name: "{{ rds_vpc_security_group_name }}"
    description: "SG RDS MySQL"
    vpc_id: "{{ vpc_id }}"
    region: "{{ aws_region }}"
    state: present
    tags: "{{ tags_common | default({}) }}"
  register: rds_sg

# IMPORTANTE: as regras de ingress (porta 3306) serão abertas a partir dos roles Web/ASG,
# permitindo acesso apenas a partir do SG de origem correto. Aqui intencionalmente não abrimos 3306.

# Cria/garante a instância RDS MySQL com subnet group e SG configurados
- name: Create/Ensure RDS instance
  amazon.aws.rds_instance:
    db_instance_identifier: "{{ rds_identifier }}"
    engine: mysql
    db_instance_class: "{{ rds_instance_class }}"
    master_username: "{{ rds_username }}"
    master_user_password: "{{ rds_password }}"
    allocated_storage: "{{ rds_allocated_storage }}"
    db_subnet_group_name: "{{ rds_subnet_group_name }}"
    vpc_security_group_ids:
      - "{{ rds_sg.group_id }}"
    publicly_accessible: false
    multi_az: false
    storage_type: gp3
    state: present
    region: "{{ aws_region }}"
    tags: "{{ tags_common | default({}) }}"
    wait: true
  register: rds_result

# Consulta informações do RDS após a criação para obter endpoint/porta de forma consistente
- name: Get RDS info (post-create)
  amazon.aws.rds_instance_info:
    region: "{{ aws_region }}"
    db_instance_identifier: "{{ rds_identifier }}"
  register: rds_info

# Define endpoint/porta preferencialmente a partir do rds_info (mais padronizado)
- name: Set RDS endpoint from rds_info first
  set_fact:
    rds_endpoint: "{{ rds_info.instances[0].endpoint.address }}"
    rds_port: "{{ rds_info.instances[0].endpoint.port }}"
  when:
    - rds_info is defined
    - rds_info.instances is defined
    - (rds_info.instances | length) > 0
    - rds_info.instances[0].endpoint is defined
    - rds_info.instances[0].endpoint.address is defined
    - rds_info.instances[0].endpoint.port is defined

# Se rds_info não trouxe, faz fallback para os dados retornados na criação
- name: Fallback to rds_result endpoint if needed
  set_fact:
    rds_endpoint: "{{ rds_result.endpoint.address }}"
    rds_port: "{{ rds_result.endpoint.port }}"
  when:
    - rds_endpoint is not defined
    - rds_result is defined
    - rds_result.endpoint is defined
    - rds_result.endpoint.address is defined
    - rds_result.endpoint.port is defined

# Falha explícita caso, por algum motivo, não seja possível determinar o endpoint do RDS
- name: Fail if RDS endpoint not found
  fail:
    msg: "Não foi possível determinar o endpoint/porta do RDS."
  when: rds_endpoint is not defined

# Mostra o endpoint e a porta resolvidos (para uso por outros plays/roles)
- name: Show resolved endpoint/port
  debug:
    msg:
      - "RDS endpoint: {{ rds_endpoint }}"
      - "RDS port: {{ rds_port }}"
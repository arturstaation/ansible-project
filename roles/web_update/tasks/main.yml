  - name: Renderizar index.html novo (local)
    ansible.builtin.template:
      src: "{{ tpl_index_src }}"
      dest: "/tmp/index.updated.html"
    delegate_to: localhost

  - name: Ler index.html renderizado
    ansible.builtin.slurp:
      src: "/tmp/index.updated.html"
    register: rendered_index
    delegate_to: localhost


  - name: Buscar ALB para exibir URL no final (opcional)
    amazon.aws.elb_application_lb_info:
      names: ["{{ alb_name }}"]
      region: "{{ aws_region }}"
    register: alb_info
    failed_when: false

  - name: Setar alb_dns_name se disponível
    ansible.builtin.set_fact:
      alb_dns_name: "{{ (alb_info.load_balancers|default([]))|first|default({})|dict2items|selectattr('key','equalto','DNSName')|map(attribute='value')|list|first|default('') }}"

  - name: Construir novo user_data com o index.html atualizado
    ansible.builtin.set_fact:
      lt_user_data: |
        #!/bin/bash
        set -euxo pipefail
        export DEBIAN_FRONTEND=noninteractive
        apt-get update
        apt-get install -y nginx

        mkdir -p /var/www/html
        cat > /var/www/html/index.html << 'EOF_INDEX'
        {{ rendered_index.content | b64decode }}
        EOF_INDEX

        # Se também tiver nginx conf/envconfig:
        # cat > /etc/nginx/sites-available/default << 'EOF_NGINX'
        # {{ (rendered_nginx.content | b64decode) if (tpl_nginx_src|length > 0) else '' }}
        # EOF_NGINX
        #
        # mkdir -p /etc/myapp
        # cat > /etc/myapp/envconfig << 'EOF_ENV'
        # {{ (envconfig_file.content | b64decode) if (file_envconfig_src|length > 0) else '' }}
        # EOF_ENV

        systemctl enable nginx
        nginx -t || true
        systemctl restart nginx

  - name: Versionar Launch Template com novo user_data
    community.aws.ec2_launch_template:
      name: "{{ lt_name }}"
      region: "{{ aws_region }}"
      image_id: "{{ ec2_ami }}"
      instance_type: "{{ ec2_instance_type }}"
      key_name: "{{ ec2_key_name | default(omit) }}"
      user_data: "{{ lt_user_data | b64encode }}"
    register: lt_result

  - name: Mostrar versão do Launch Template
    ansible.builtin.debug:
      msg:
        lt_name: "{{ lt_name }}"
        latest_version: "{{ lt_result.latest_version_number | default('unknown') }}"

  - name: Rolling replace das instâncias do ASG (1 por vez, sem derrubar)
    amazon.aws.autoscaling_group:
      name: "{{ asg_name }}"
      region: "{{ aws_region }}"
      launch_template:
        launch_template_name: "{{ lt_name }}"
        version: "$Latest"
      replace_all_instances: true
      replace_batch_size: 1
      wait_for_instances: true
      wait_timeout: 1800
      health_check_type: ELB
      health_check_grace_period: 300
      state: present
    register: asg_replace

  - name: Resultado do rolling update
    ansible.builtin.debug:
      var: asg_replace

  - name: Exibir URL de acesso
    ansible.builtin.debug:
      msg:
        access_url: "{{ alb_dns_name|length > 0 | ternary('http://' ~ alb_dns_name ~ '/', 'ALB DNS não disponível neste play') }}"